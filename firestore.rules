rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation and security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(user) {
      return user.keys().hasAll(['displayName', 'username', 'email']) &&
             user.displayName is string && user.displayName.size() >= 2 && user.displayName.size() <= 50 &&
             user.username is string && user.username.size() >= 3 && user.username.size() <= 30 &&
             user.email is string && user.email.matches('.*@.*\\..*');
    }
    
    function isValidProgress(data) {
      return data.keys().hasAll(['streak', 'totalDays', 'xp']) &&
             data.streak is int && data.streak >= 0 && data.streak <= 10000 &&
             data.totalDays is int && data.totalDays >= 0 && data.totalDays <= 10000 &&
             data.xp is int && data.xp >= 0 && data.xp <= 1000000;
    }
    
    function isValidBadge(badge) {
      return badge is string && badge.size() <= 100;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Users cannot delete their own accounts via Firestore
    }
    
    // User stats collection for analytics (read-only for users)
    match /userStats/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server can write stats
    }
    
    // Badge statistics - read-only for all authenticated users
    match /badgeStats/{badgeId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can update badge stats
    }
    
    // Community stats - read-only for all authenticated users
    match /communityStats/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can update community stats
    }
    
    // Referral codes - authenticated users can read for validation, only server can write
    match /referralCodes/{code} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can manage referral codes
    }
    
    // Daily missions - users can only access their own
    match /dailyMissions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User progress logs - append-only for user's own data
    match /progressLogs/{userId} {
      match /entries/{entryId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && 
                         request.resource.data.timestamp is timestamp &&
                         request.resource.data.keys().hasAll(['timestamp', 'action']) &&
                         request.resource.data.action is string;
        allow update, delete: if false; // Logs are immutable
      }
    }
    
    // Error logs - users can create their own error reports
    match /errorLogs/{document} {
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp is timestamp;
      allow read, update, delete: if false; // Only server can read error logs
    }
    
    // Analytics events - users can create their own events
    match /analyticsEvents/{document} {
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp is timestamp;
      allow read, update, delete: if false; // Only server can read analytics
    }
    
    // Gemini usage tracking - users can read their own usage
    match /geminiUsage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server can track usage
    }
    
    // Default deny rule for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}